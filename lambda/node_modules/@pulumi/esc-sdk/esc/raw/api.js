"use strict";
/* tslint:disable */
/* eslint-disable */
// Copyright 2024, Pulumi Corporation.  All rights reserved.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EscApi = exports.EscApiFactory = exports.EscApiFp = exports.EscApiAxiosParamCreator = void 0;
/**
 * ESC (Environments, Secrets, Config) API
 * Pulumi ESC allows you to compose and manage hierarchical collections of configuration and secrets and consume them in various ways.
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
const userAgent = 'esc-sdk/ts/v0.12.1';
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("./common");
// @ts-ignore
const base_1 = require("./base");
/**
 * EscApi - axios parameter creator
 * @export
 */
const EscApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Checks an environment definition for errors
         * @summary Checks an environment definition for errors
         * @param {string} orgName Organization name
         * @param {string} body Environment Yaml content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkEnvironmentYaml: (orgName_1, body_1, ...args_1) => __awaiter(this, [orgName_1, body_1, ...args_1], void 0, function* (orgName, body, options = {}) {
            // verify required parameter 'orgName' is not null or undefined
            (0, common_1.assertParamExists)('checkEnvironmentYaml', 'orgName', orgName);
            // verify required parameter 'body' is not null or undefined
            (0, common_1.assertParamExists)('checkEnvironmentYaml', 'body', body);
            const localVarPath = `/environments/{orgName}/yaml/check`
                .replace(`{${"orgName"}}`, encodeURIComponent(String(orgName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Authorization required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/x-yaml';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            localVarHeaderParameter['X-Pulumi-Source'] = 'esc-sdk';
            localVarHeaderParameter['User-Agent'] = userAgent;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Clones an environment
         * @summary Clones an environment
         * @param {string} orgName Organization name
         * @param {string} projectName Project name
         * @param {string} envName Environment name
         * @param {CloneEnvironment} cloneEnvironment Clone environment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloneEnvironment: (orgName_2, projectName_1, envName_1, cloneEnvironment_1, ...args_2) => __awaiter(this, [orgName_2, projectName_1, envName_1, cloneEnvironment_1, ...args_2], void 0, function* (orgName, projectName, envName, cloneEnvironment, options = {}) {
            // verify required parameter 'orgName' is not null or undefined
            (0, common_1.assertParamExists)('cloneEnvironment', 'orgName', orgName);
            // verify required parameter 'projectName' is not null or undefined
            (0, common_1.assertParamExists)('cloneEnvironment', 'projectName', projectName);
            // verify required parameter 'envName' is not null or undefined
            (0, common_1.assertParamExists)('cloneEnvironment', 'envName', envName);
            // verify required parameter 'cloneEnvironment' is not null or undefined
            (0, common_1.assertParamExists)('cloneEnvironment', 'cloneEnvironment', cloneEnvironment);
            const localVarPath = `/environments/{orgName}/{projectName}/{envName}/clone`
                .replace(`{${"orgName"}}`, encodeURIComponent(String(orgName)))
                .replace(`{${"projectName"}}`, encodeURIComponent(String(projectName)))
                .replace(`{${"envName"}}`, encodeURIComponent(String(envName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Authorization required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            localVarHeaderParameter['X-Pulumi-Source'] = 'esc-sdk';
            localVarHeaderParameter['User-Agent'] = userAgent;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(cloneEnvironment, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Creates an environment in the given org with the given name.
         * @summary Create a new environment
         * @param {string} orgName Organization name
         * @param {CreateEnvironment} createEnvironment Create Environment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEnvironment: (orgName_3, createEnvironment_1, ...args_3) => __awaiter(this, [orgName_3, createEnvironment_1, ...args_3], void 0, function* (orgName, createEnvironment, options = {}) {
            // verify required parameter 'orgName' is not null or undefined
            (0, common_1.assertParamExists)('createEnvironment', 'orgName', orgName);
            // verify required parameter 'createEnvironment' is not null or undefined
            (0, common_1.assertParamExists)('createEnvironment', 'createEnvironment', createEnvironment);
            const localVarPath = `/environments/{orgName}`
                .replace(`{${"orgName"}}`, encodeURIComponent(String(orgName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Authorization required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            localVarHeaderParameter['X-Pulumi-Source'] = 'esc-sdk';
            localVarHeaderParameter['User-Agent'] = userAgent;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createEnvironment, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create environment revision tag
         * @summary Create environment revision tag
         * @param {string} orgName Organization name
         * @param {string} projectName Project name
         * @param {string} envName Environment name
         * @param {CreateEnvironmentRevisionTag} createEnvironmentRevisionTag Create environment revision tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEnvironmentRevisionTag: (orgName_4, projectName_2, envName_2, createEnvironmentRevisionTag_1, ...args_4) => __awaiter(this, [orgName_4, projectName_2, envName_2, createEnvironmentRevisionTag_1, ...args_4], void 0, function* (orgName, projectName, envName, createEnvironmentRevisionTag, options = {}) {
            // verify required parameter 'orgName' is not null or undefined
            (0, common_1.assertParamExists)('createEnvironmentRevisionTag', 'orgName', orgName);
            // verify required parameter 'projectName' is not null or undefined
            (0, common_1.assertParamExists)('createEnvironmentRevisionTag', 'projectName', projectName);
            // verify required parameter 'envName' is not null or undefined
            (0, common_1.assertParamExists)('createEnvironmentRevisionTag', 'envName', envName);
            // verify required parameter 'createEnvironmentRevisionTag' is not null or undefined
            (0, common_1.assertParamExists)('createEnvironmentRevisionTag', 'createEnvironmentRevisionTag', createEnvironmentRevisionTag);
            const localVarPath = `/environments/{orgName}/{projectName}/{envName}/versions/tags`
                .replace(`{${"orgName"}}`, encodeURIComponent(String(orgName)))
                .replace(`{${"projectName"}}`, encodeURIComponent(String(projectName)))
                .replace(`{${"envName"}}`, encodeURIComponent(String(envName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Authorization required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            localVarHeaderParameter['X-Pulumi-Source'] = 'esc-sdk';
            localVarHeaderParameter['User-Agent'] = userAgent;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createEnvironmentRevisionTag, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create environment tag
         * @summary Create environment tag
         * @param {string} orgName Organization name
         * @param {string} projectName Project name
         * @param {string} envName Environment name
         * @param {CreateEnvironmentTag} createEnvironmentTag Create environment tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEnvironmentTag: (orgName_5, projectName_3, envName_3, createEnvironmentTag_1, ...args_5) => __awaiter(this, [orgName_5, projectName_3, envName_3, createEnvironmentTag_1, ...args_5], void 0, function* (orgName, projectName, envName, createEnvironmentTag, options = {}) {
            // verify required parameter 'orgName' is not null or undefined
            (0, common_1.assertParamExists)('createEnvironmentTag', 'orgName', orgName);
            // verify required parameter 'projectName' is not null or undefined
            (0, common_1.assertParamExists)('createEnvironmentTag', 'projectName', projectName);
            // verify required parameter 'envName' is not null or undefined
            (0, common_1.assertParamExists)('createEnvironmentTag', 'envName', envName);
            // verify required parameter 'createEnvironmentTag' is not null or undefined
            (0, common_1.assertParamExists)('createEnvironmentTag', 'createEnvironmentTag', createEnvironmentTag);
            const localVarPath = `/environments/{orgName}/{projectName}/{envName}/tags`
                .replace(`{${"orgName"}}`, encodeURIComponent(String(orgName)))
                .replace(`{${"projectName"}}`, encodeURIComponent(String(projectName)))
                .replace(`{${"envName"}}`, encodeURIComponent(String(envName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Authorization required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            localVarHeaderParameter['X-Pulumi-Source'] = 'esc-sdk';
            localVarHeaderParameter['User-Agent'] = userAgent;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createEnvironmentTag, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Reads the definition for the given environment with static secrets in plaintext
         * @summary Reads the definition for the given environment with static secrets in plaintext
         * @param {string} orgName Organization name
         * @param {string} projectName Project name
         * @param {string} envName Environment name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        decryptEnvironment: (orgName_6, projectName_4, envName_4, ...args_6) => __awaiter(this, [orgName_6, projectName_4, envName_4, ...args_6], void 0, function* (orgName, projectName, envName, options = {}) {
            // verify required parameter 'orgName' is not null or undefined
            (0, common_1.assertParamExists)('decryptEnvironment', 'orgName', orgName);
            // verify required parameter 'projectName' is not null or undefined
            (0, common_1.assertParamExists)('decryptEnvironment', 'projectName', projectName);
            // verify required parameter 'envName' is not null or undefined
            (0, common_1.assertParamExists)('decryptEnvironment', 'envName', envName);
            const localVarPath = `/environments/{orgName}/{projectName}/{envName}/decrypt`
                .replace(`{${"orgName"}}`, encodeURIComponent(String(orgName)))
                .replace(`{${"projectName"}}`, encodeURIComponent(String(projectName)))
                .replace(`{${"envName"}}`, encodeURIComponent(String(envName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Authorization required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            localVarHeaderParameter['X-Pulumi-Source'] = 'esc-sdk';
            localVarHeaderParameter['User-Agent'] = userAgent;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete an environment
         * @summary Delete an environment
         * @param {string} orgName Organization name
         * @param {string} projectName Project name
         * @param {string} envName Environment name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEnvironment: (orgName_7, projectName_5, envName_5, ...args_7) => __awaiter(this, [orgName_7, projectName_5, envName_5, ...args_7], void 0, function* (orgName, projectName, envName, options = {}) {
            // verify required parameter 'orgName' is not null or undefined
            (0, common_1.assertParamExists)('deleteEnvironment', 'orgName', orgName);
            // verify required parameter 'projectName' is not null or undefined
            (0, common_1.assertParamExists)('deleteEnvironment', 'projectName', projectName);
            // verify required parameter 'envName' is not null or undefined
            (0, common_1.assertParamExists)('deleteEnvironment', 'envName', envName);
            const localVarPath = `/environments/{orgName}/{projectName}/{envName}`
                .replace(`{${"orgName"}}`, encodeURIComponent(String(orgName)))
                .replace(`{${"projectName"}}`, encodeURIComponent(String(projectName)))
                .replace(`{${"envName"}}`, encodeURIComponent(String(envName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Authorization required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            localVarHeaderParameter['X-Pulumi-Source'] = 'esc-sdk';
            localVarHeaderParameter['User-Agent'] = userAgent;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete environment revision tag
         * @summary Delete environment revision tag
         * @param {string} orgName Organization name
         * @param {string} projectName Project name
         * @param {string} envName Environment name
         * @param {string} tagName Tag name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEnvironmentRevisionTag: (orgName_8, projectName_6, envName_6, tagName_1, ...args_8) => __awaiter(this, [orgName_8, projectName_6, envName_6, tagName_1, ...args_8], void 0, function* (orgName, projectName, envName, tagName, options = {}) {
            // verify required parameter 'orgName' is not null or undefined
            (0, common_1.assertParamExists)('deleteEnvironmentRevisionTag', 'orgName', orgName);
            // verify required parameter 'projectName' is not null or undefined
            (0, common_1.assertParamExists)('deleteEnvironmentRevisionTag', 'projectName', projectName);
            // verify required parameter 'envName' is not null or undefined
            (0, common_1.assertParamExists)('deleteEnvironmentRevisionTag', 'envName', envName);
            // verify required parameter 'tagName' is not null or undefined
            (0, common_1.assertParamExists)('deleteEnvironmentRevisionTag', 'tagName', tagName);
            const localVarPath = `/environments/{orgName}/{projectName}/{envName}/versions/tags/{tagName}`
                .replace(`{${"orgName"}}`, encodeURIComponent(String(orgName)))
                .replace(`{${"projectName"}}`, encodeURIComponent(String(projectName)))
                .replace(`{${"envName"}}`, encodeURIComponent(String(envName)))
                .replace(`{${"tagName"}}`, encodeURIComponent(String(tagName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Authorization required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            localVarHeaderParameter['X-Pulumi-Source'] = 'esc-sdk';
            localVarHeaderParameter['User-Agent'] = userAgent;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete environment tag
         * @summary Delete environment tag
         * @param {string} orgName Organization name
         * @param {string} projectName Project name
         * @param {string} envName Environment name
         * @param {string} tagName Tag name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEnvironmentTag: (orgName_9, projectName_7, envName_7, tagName_2, ...args_9) => __awaiter(this, [orgName_9, projectName_7, envName_7, tagName_2, ...args_9], void 0, function* (orgName, projectName, envName, tagName, options = {}) {
            // verify required parameter 'orgName' is not null or undefined
            (0, common_1.assertParamExists)('deleteEnvironmentTag', 'orgName', orgName);
            // verify required parameter 'projectName' is not null or undefined
            (0, common_1.assertParamExists)('deleteEnvironmentTag', 'projectName', projectName);
            // verify required parameter 'envName' is not null or undefined
            (0, common_1.assertParamExists)('deleteEnvironmentTag', 'envName', envName);
            // verify required parameter 'tagName' is not null or undefined
            (0, common_1.assertParamExists)('deleteEnvironmentTag', 'tagName', tagName);
            const localVarPath = `/environments/{orgName}/{projectName}/{envName}/tags/{tagName}`
                .replace(`{${"orgName"}}`, encodeURIComponent(String(orgName)))
                .replace(`{${"projectName"}}`, encodeURIComponent(String(projectName)))
                .replace(`{${"envName"}}`, encodeURIComponent(String(envName)))
                .replace(`{${"tagName"}}`, encodeURIComponent(String(tagName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Authorization required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            localVarHeaderParameter['X-Pulumi-Source'] = 'esc-sdk';
            localVarHeaderParameter['User-Agent'] = userAgent;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Read an environment
         * @summary Read an environment
         * @param {string} orgName Organization name
         * @param {string} projectName Project name
         * @param {string} envName Environment name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnvironment: (orgName_10, projectName_8, envName_8, ...args_10) => __awaiter(this, [orgName_10, projectName_8, envName_8, ...args_10], void 0, function* (orgName, projectName, envName, options = {}) {
            // verify required parameter 'orgName' is not null or undefined
            (0, common_1.assertParamExists)('getEnvironment', 'orgName', orgName);
            // verify required parameter 'projectName' is not null or undefined
            (0, common_1.assertParamExists)('getEnvironment', 'projectName', projectName);
            // verify required parameter 'envName' is not null or undefined
            (0, common_1.assertParamExists)('getEnvironment', 'envName', envName);
            const localVarPath = `/environments/{orgName}/{projectName}/{envName}`
                .replace(`{${"orgName"}}`, encodeURIComponent(String(orgName)))
                .replace(`{${"projectName"}}`, encodeURIComponent(String(projectName)))
                .replace(`{${"envName"}}`, encodeURIComponent(String(envName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Authorization required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            localVarHeaderParameter['X-Pulumi-Source'] = 'esc-sdk';
            localVarHeaderParameter['User-Agent'] = userAgent;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Read an environmentat a specific revision or tag
         * @summary Read an environment at a specific version
         * @param {string} orgName Organization name
         * @param {string} projectName Project name
         * @param {string} envName Environment name
         * @param {string} version Revision or tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnvironmentAtVersion: (orgName_11, projectName_9, envName_9, version_1, ...args_11) => __awaiter(this, [orgName_11, projectName_9, envName_9, version_1, ...args_11], void 0, function* (orgName, projectName, envName, version, options = {}) {
            // verify required parameter 'orgName' is not null or undefined
            (0, common_1.assertParamExists)('getEnvironmentAtVersion', 'orgName', orgName);
            // verify required parameter 'projectName' is not null or undefined
            (0, common_1.assertParamExists)('getEnvironmentAtVersion', 'projectName', projectName);
            // verify required parameter 'envName' is not null or undefined
            (0, common_1.assertParamExists)('getEnvironmentAtVersion', 'envName', envName);
            // verify required parameter 'version' is not null or undefined
            (0, common_1.assertParamExists)('getEnvironmentAtVersion', 'version', version);
            const localVarPath = `/environments/{orgName}/{projectName}/{envName}/versions/{version}`
                .replace(`{${"orgName"}}`, encodeURIComponent(String(orgName)))
                .replace(`{${"projectName"}}`, encodeURIComponent(String(projectName)))
                .replace(`{${"envName"}}`, encodeURIComponent(String(envName)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Authorization required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            localVarHeaderParameter['X-Pulumi-Source'] = 'esc-sdk';
            localVarHeaderParameter['User-Agent'] = userAgent;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns the ETag for the given environment if it exists.
         * @summary Return an Environment ETag
         * @param {string} orgName Organization name
         * @param {string} projectName Project name
         * @param {string} envName Environment name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnvironmentETag: (orgName_12, projectName_10, envName_10, ...args_12) => __awaiter(this, [orgName_12, projectName_10, envName_10, ...args_12], void 0, function* (orgName, projectName, envName, options = {}) {
            // verify required parameter 'orgName' is not null or undefined
            (0, common_1.assertParamExists)('getEnvironmentETag', 'orgName', orgName);
            // verify required parameter 'projectName' is not null or undefined
            (0, common_1.assertParamExists)('getEnvironmentETag', 'projectName', projectName);
            // verify required parameter 'envName' is not null or undefined
            (0, common_1.assertParamExists)('getEnvironmentETag', 'envName', envName);
            const localVarPath = `/environments/{orgName}/{projectName}/{envName}`
                .replace(`{${"orgName"}}`, encodeURIComponent(String(orgName)))
                .replace(`{${"projectName"}}`, encodeURIComponent(String(projectName)))
                .replace(`{${"envName"}}`, encodeURIComponent(String(envName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'HEAD' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Authorization required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            localVarHeaderParameter['X-Pulumi-Source'] = 'esc-sdk';
            localVarHeaderParameter['User-Agent'] = userAgent;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Read environment revision tag
         * @summary Read environment revision tag
         * @param {string} orgName Organization name
         * @param {string} projectName Project name
         * @param {string} envName Environment name
         * @param {string} tagName Tag name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnvironmentRevisionTag: (orgName_13, projectName_11, envName_11, tagName_3, ...args_13) => __awaiter(this, [orgName_13, projectName_11, envName_11, tagName_3, ...args_13], void 0, function* (orgName, projectName, envName, tagName, options = {}) {
            // verify required parameter 'orgName' is not null or undefined
            (0, common_1.assertParamExists)('getEnvironmentRevisionTag', 'orgName', orgName);
            // verify required parameter 'projectName' is not null or undefined
            (0, common_1.assertParamExists)('getEnvironmentRevisionTag', 'projectName', projectName);
            // verify required parameter 'envName' is not null or undefined
            (0, common_1.assertParamExists)('getEnvironmentRevisionTag', 'envName', envName);
            // verify required parameter 'tagName' is not null or undefined
            (0, common_1.assertParamExists)('getEnvironmentRevisionTag', 'tagName', tagName);
            const localVarPath = `/environments/{orgName}/{projectName}/{envName}/versions/tags/{tagName}`
                .replace(`{${"orgName"}}`, encodeURIComponent(String(orgName)))
                .replace(`{${"projectName"}}`, encodeURIComponent(String(projectName)))
                .replace(`{${"envName"}}`, encodeURIComponent(String(envName)))
                .replace(`{${"tagName"}}`, encodeURIComponent(String(tagName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Authorization required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            localVarHeaderParameter['X-Pulumi-Source'] = 'esc-sdk';
            localVarHeaderParameter['User-Agent'] = userAgent;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Read an environment tag
         * @summary Read an environment tag
         * @param {string} orgName Organization name
         * @param {string} projectName Project name
         * @param {string} envName Environment name
         * @param {string} tagName Tag name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnvironmentTag: (orgName_14, projectName_12, envName_12, tagName_4, ...args_14) => __awaiter(this, [orgName_14, projectName_12, envName_12, tagName_4, ...args_14], void 0, function* (orgName, projectName, envName, tagName, options = {}) {
            // verify required parameter 'orgName' is not null or undefined
            (0, common_1.assertParamExists)('getEnvironmentTag', 'orgName', orgName);
            // verify required parameter 'projectName' is not null or undefined
            (0, common_1.assertParamExists)('getEnvironmentTag', 'projectName', projectName);
            // verify required parameter 'envName' is not null or undefined
            (0, common_1.assertParamExists)('getEnvironmentTag', 'envName', envName);
            // verify required parameter 'tagName' is not null or undefined
            (0, common_1.assertParamExists)('getEnvironmentTag', 'tagName', tagName);
            const localVarPath = `/environments/{orgName}/{projectName}/{envName}/tags/{tagName}`
                .replace(`{${"orgName"}}`, encodeURIComponent(String(orgName)))
                .replace(`{${"projectName"}}`, encodeURIComponent(String(projectName)))
                .replace(`{${"envName"}}`, encodeURIComponent(String(envName)))
                .replace(`{${"tagName"}}`, encodeURIComponent(String(tagName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Authorization required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            localVarHeaderParameter['X-Pulumi-Source'] = 'esc-sdk';
            localVarHeaderParameter['User-Agent'] = userAgent;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List environment revisions
         * @summary List environment revisions
         * @param {string} orgName Organization name
         * @param {string} projectName Project name
         * @param {string} envName Environment name
         * @param {string} [after] after tag for pagination
         * @param {number} [count] limit of tags to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEnvironmentRevisionTags: (orgName_15, projectName_13, envName_13, after_1, count_1, ...args_15) => __awaiter(this, [orgName_15, projectName_13, envName_13, after_1, count_1, ...args_15], void 0, function* (orgName, projectName, envName, after, count, options = {}) {
            // verify required parameter 'orgName' is not null or undefined
            (0, common_1.assertParamExists)('listEnvironmentRevisionTags', 'orgName', orgName);
            // verify required parameter 'projectName' is not null or undefined
            (0, common_1.assertParamExists)('listEnvironmentRevisionTags', 'projectName', projectName);
            // verify required parameter 'envName' is not null or undefined
            (0, common_1.assertParamExists)('listEnvironmentRevisionTags', 'envName', envName);
            const localVarPath = `/environments/{orgName}/{projectName}/{envName}/versions/tags`
                .replace(`{${"orgName"}}`, encodeURIComponent(String(orgName)))
                .replace(`{${"projectName"}}`, encodeURIComponent(String(projectName)))
                .replace(`{${"envName"}}`, encodeURIComponent(String(envName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Authorization required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }
            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            localVarHeaderParameter['X-Pulumi-Source'] = 'esc-sdk';
            localVarHeaderParameter['User-Agent'] = userAgent;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List environment revisions
         * @summary List environment revisions
         * @param {string} orgName Organization name
         * @param {string} projectName Project name
         * @param {string} envName Environment name
         * @param {number} [before] before revision number for pagination
         * @param {number} [count] limit of revisions to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEnvironmentRevisions: (orgName_16, projectName_14, envName_14, before_1, count_2, ...args_16) => __awaiter(this, [orgName_16, projectName_14, envName_14, before_1, count_2, ...args_16], void 0, function* (orgName, projectName, envName, before, count, options = {}) {
            // verify required parameter 'orgName' is not null or undefined
            (0, common_1.assertParamExists)('listEnvironmentRevisions', 'orgName', orgName);
            // verify required parameter 'projectName' is not null or undefined
            (0, common_1.assertParamExists)('listEnvironmentRevisions', 'projectName', projectName);
            // verify required parameter 'envName' is not null or undefined
            (0, common_1.assertParamExists)('listEnvironmentRevisions', 'envName', envName);
            const localVarPath = `/environments/{orgName}/{projectName}/{envName}/versions`
                .replace(`{${"orgName"}}`, encodeURIComponent(String(orgName)))
                .replace(`{${"projectName"}}`, encodeURIComponent(String(projectName)))
                .replace(`{${"envName"}}`, encodeURIComponent(String(envName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Authorization required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            if (before !== undefined) {
                localVarQueryParameter['before'] = before;
            }
            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            localVarHeaderParameter['X-Pulumi-Source'] = 'esc-sdk';
            localVarHeaderParameter['User-Agent'] = userAgent;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List environment tags
         * @summary List environment tags
         * @param {string} orgName Organization name
         * @param {string} projectName Project name
         * @param {string} envName Environment name
         * @param {string} [after] after tag for pagination
         * @param {number} [count] limit of tags to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEnvironmentTags: (orgName_17, projectName_15, envName_15, after_2, count_3, ...args_17) => __awaiter(this, [orgName_17, projectName_15, envName_15, after_2, count_3, ...args_17], void 0, function* (orgName, projectName, envName, after, count, options = {}) {
            // verify required parameter 'orgName' is not null or undefined
            (0, common_1.assertParamExists)('listEnvironmentTags', 'orgName', orgName);
            // verify required parameter 'projectName' is not null or undefined
            (0, common_1.assertParamExists)('listEnvironmentTags', 'projectName', projectName);
            // verify required parameter 'envName' is not null or undefined
            (0, common_1.assertParamExists)('listEnvironmentTags', 'envName', envName);
            const localVarPath = `/environments/{orgName}/{projectName}/{envName}/tags`
                .replace(`{${"orgName"}}`, encodeURIComponent(String(orgName)))
                .replace(`{${"projectName"}}`, encodeURIComponent(String(projectName)))
                .replace(`{${"envName"}}`, encodeURIComponent(String(envName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Authorization required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }
            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            localVarHeaderParameter['X-Pulumi-Source'] = 'esc-sdk';
            localVarHeaderParameter['User-Agent'] = userAgent;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List environments in the organization available to the current user
         * @summary List environments in the organization
         * @param {string} orgName Organization name
         * @param {string} [continuationToken] continuation Token from previous query to fetch next page of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEnvironments: (orgName_18, continuationToken_1, ...args_18) => __awaiter(this, [orgName_18, continuationToken_1, ...args_18], void 0, function* (orgName, continuationToken, options = {}) {
            // verify required parameter 'orgName' is not null or undefined
            (0, common_1.assertParamExists)('listEnvironments', 'orgName', orgName);
            const localVarPath = `/environments/{orgName}`
                .replace(`{${"orgName"}}`, encodeURIComponent(String(orgName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Authorization required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            if (continuationToken !== undefined) {
                localVarQueryParameter['continuationToken'] = continuationToken;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            localVarHeaderParameter['X-Pulumi-Source'] = 'esc-sdk';
            localVarHeaderParameter['User-Agent'] = userAgent;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Opens a session the given environment for the indicated duration. This returns a session id that can be used to then read values. The default duration is 1 hour.
         * @summary Open an environment session
         * @param {string} orgName Organization name
         * @param {string} projectName Project name
         * @param {string} envName Environment name
         * @param {string} [duration] open duration - A duration string is a possibly signed sequence of decimal numbers, each with optional fraction and a unit suffix, such as “300ms”, “1.5h” or “2h45m”. Valid time units are “ns”, “us” (or “µs”), “ms”, “s”, “m”, “h”.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openEnvironment: (orgName_19, projectName_16, envName_16, duration_1, ...args_19) => __awaiter(this, [orgName_19, projectName_16, envName_16, duration_1, ...args_19], void 0, function* (orgName, projectName, envName, duration, options = {}) {
            // verify required parameter 'orgName' is not null or undefined
            (0, common_1.assertParamExists)('openEnvironment', 'orgName', orgName);
            // verify required parameter 'projectName' is not null or undefined
            (0, common_1.assertParamExists)('openEnvironment', 'projectName', projectName);
            // verify required parameter 'envName' is not null or undefined
            (0, common_1.assertParamExists)('openEnvironment', 'envName', envName);
            const localVarPath = `/environments/{orgName}/{projectName}/{envName}/open`
                .replace(`{${"orgName"}}`, encodeURIComponent(String(orgName)))
                .replace(`{${"projectName"}}`, encodeURIComponent(String(projectName)))
                .replace(`{${"envName"}}`, encodeURIComponent(String(envName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Authorization required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            if (duration !== undefined) {
                localVarQueryParameter['duration'] = duration;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            localVarHeaderParameter['X-Pulumi-Source'] = 'esc-sdk';
            localVarHeaderParameter['User-Agent'] = userAgent;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Opens a session the given environment at a specific version for the indicated duration. This returns a session id that can be used to then read values. The default duration is 1 hour.
         * @summary Open an environment session at a specific version
         * @param {string} orgName Organization name
         * @param {string} projectName Project name
         * @param {string} envName Environment name
         * @param {string} version Revision or tag
         * @param {string} [duration] open duration - A duration string is a possibly signed sequence of decimal numbers, each with optional fraction and a unit suffix, such as “300ms”, “1.5h” or “2h45m”. Valid time units are “ns”, “us” (or “µs”), “ms”, “s”, “m”, “h”.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openEnvironmentAtVersion: (orgName_20, projectName_17, envName_17, version_2, duration_2, ...args_20) => __awaiter(this, [orgName_20, projectName_17, envName_17, version_2, duration_2, ...args_20], void 0, function* (orgName, projectName, envName, version, duration, options = {}) {
            // verify required parameter 'orgName' is not null or undefined
            (0, common_1.assertParamExists)('openEnvironmentAtVersion', 'orgName', orgName);
            // verify required parameter 'projectName' is not null or undefined
            (0, common_1.assertParamExists)('openEnvironmentAtVersion', 'projectName', projectName);
            // verify required parameter 'envName' is not null or undefined
            (0, common_1.assertParamExists)('openEnvironmentAtVersion', 'envName', envName);
            // verify required parameter 'version' is not null or undefined
            (0, common_1.assertParamExists)('openEnvironmentAtVersion', 'version', version);
            const localVarPath = `/environments/{orgName}/{projectName}/{envName}/versions/{version}/open`
                .replace(`{${"orgName"}}`, encodeURIComponent(String(orgName)))
                .replace(`{${"projectName"}}`, encodeURIComponent(String(projectName)))
                .replace(`{${"envName"}}`, encodeURIComponent(String(envName)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Authorization required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            if (duration !== undefined) {
                localVarQueryParameter['duration'] = duration;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            localVarHeaderParameter['X-Pulumi-Source'] = 'esc-sdk';
            localVarHeaderParameter['User-Agent'] = userAgent;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Reads and decrypts secrets including retrieving dynamic secrets from providers.
         * @summary Read an open environment
         * @param {string} orgName Organization name
         * @param {string} projectName Project name
         * @param {string} envName Environment name
         * @param {string} openSessionID Open session ID returned from environment open
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readOpenEnvironment: (orgName_21, projectName_18, envName_18, openSessionID_1, ...args_21) => __awaiter(this, [orgName_21, projectName_18, envName_18, openSessionID_1, ...args_21], void 0, function* (orgName, projectName, envName, openSessionID, options = {}) {
            // verify required parameter 'orgName' is not null or undefined
            (0, common_1.assertParamExists)('readOpenEnvironment', 'orgName', orgName);
            // verify required parameter 'projectName' is not null or undefined
            (0, common_1.assertParamExists)('readOpenEnvironment', 'projectName', projectName);
            // verify required parameter 'envName' is not null or undefined
            (0, common_1.assertParamExists)('readOpenEnvironment', 'envName', envName);
            // verify required parameter 'openSessionID' is not null or undefined
            (0, common_1.assertParamExists)('readOpenEnvironment', 'openSessionID', openSessionID);
            const localVarPath = `/environments/{orgName}/{projectName}/{envName}/open/{openSessionID}`
                .replace(`{${"orgName"}}`, encodeURIComponent(String(orgName)))
                .replace(`{${"projectName"}}`, encodeURIComponent(String(projectName)))
                .replace(`{${"envName"}}`, encodeURIComponent(String(envName)))
                .replace(`{${"openSessionID"}}`, encodeURIComponent(String(openSessionID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Authorization required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            localVarHeaderParameter['X-Pulumi-Source'] = 'esc-sdk';
            localVarHeaderParameter['User-Agent'] = userAgent;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Reads and decrypts secrets including retrieving dynamic secrets from providers.
         * @summary Read an open environment
         * @param {string} orgName Organization name
         * @param {string} projectName Project name
         * @param {string} envName Environment name
         * @param {string} openSessionID Open session ID returned from environment open
         * @param {string} property Path to a specific property using Pulumi path syntax https://www.pulumi.com/docs/concepts/config/#structured-configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readOpenEnvironmentProperty: (orgName_22, projectName_19, envName_19, openSessionID_2, property_1, ...args_22) => __awaiter(this, [orgName_22, projectName_19, envName_19, openSessionID_2, property_1, ...args_22], void 0, function* (orgName, projectName, envName, openSessionID, property, options = {}) {
            // verify required parameter 'orgName' is not null or undefined
            (0, common_1.assertParamExists)('readOpenEnvironmentProperty', 'orgName', orgName);
            // verify required parameter 'projectName' is not null or undefined
            (0, common_1.assertParamExists)('readOpenEnvironmentProperty', 'projectName', projectName);
            // verify required parameter 'envName' is not null or undefined
            (0, common_1.assertParamExists)('readOpenEnvironmentProperty', 'envName', envName);
            // verify required parameter 'openSessionID' is not null or undefined
            (0, common_1.assertParamExists)('readOpenEnvironmentProperty', 'openSessionID', openSessionID);
            // verify required parameter 'property' is not null or undefined
            (0, common_1.assertParamExists)('readOpenEnvironmentProperty', 'property', property);
            const localVarPath = `/environments/{orgName}/{projectName}/{envName}/open//{openSessionID}`
                .replace(`{${"orgName"}}`, encodeURIComponent(String(orgName)))
                .replace(`{${"projectName"}}`, encodeURIComponent(String(projectName)))
                .replace(`{${"envName"}}`, encodeURIComponent(String(envName)))
                .replace(`{${"openSessionID"}}`, encodeURIComponent(String(openSessionID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Authorization required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            if (property !== undefined) {
                localVarQueryParameter['property'] = property;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            localVarHeaderParameter['X-Pulumi-Source'] = 'esc-sdk';
            localVarHeaderParameter['User-Agent'] = userAgent;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Update environment revision tag
         * @summary Update environment revision tag
         * @param {string} orgName Organization name
         * @param {string} projectName Project name
         * @param {string} envName Environment name
         * @param {string} tagName Tag name
         * @param {UpdateEnvironmentRevisionTag} updateEnvironmentRevisionTag Update environment revision tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEnvironmentRevisionTag: (orgName_23, projectName_20, envName_20, tagName_5, updateEnvironmentRevisionTag_1, ...args_23) => __awaiter(this, [orgName_23, projectName_20, envName_20, tagName_5, updateEnvironmentRevisionTag_1, ...args_23], void 0, function* (orgName, projectName, envName, tagName, updateEnvironmentRevisionTag, options = {}) {
            // verify required parameter 'orgName' is not null or undefined
            (0, common_1.assertParamExists)('updateEnvironmentRevisionTag', 'orgName', orgName);
            // verify required parameter 'projectName' is not null or undefined
            (0, common_1.assertParamExists)('updateEnvironmentRevisionTag', 'projectName', projectName);
            // verify required parameter 'envName' is not null or undefined
            (0, common_1.assertParamExists)('updateEnvironmentRevisionTag', 'envName', envName);
            // verify required parameter 'tagName' is not null or undefined
            (0, common_1.assertParamExists)('updateEnvironmentRevisionTag', 'tagName', tagName);
            // verify required parameter 'updateEnvironmentRevisionTag' is not null or undefined
            (0, common_1.assertParamExists)('updateEnvironmentRevisionTag', 'updateEnvironmentRevisionTag', updateEnvironmentRevisionTag);
            const localVarPath = `/environments/{orgName}/{projectName}/{envName}/versions/tags/{tagName}`
                .replace(`{${"orgName"}}`, encodeURIComponent(String(orgName)))
                .replace(`{${"projectName"}}`, encodeURIComponent(String(projectName)))
                .replace(`{${"envName"}}`, encodeURIComponent(String(envName)))
                .replace(`{${"tagName"}}`, encodeURIComponent(String(tagName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Authorization required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            localVarHeaderParameter['X-Pulumi-Source'] = 'esc-sdk';
            localVarHeaderParameter['User-Agent'] = userAgent;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(updateEnvironmentRevisionTag, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Update an environment tag
         * @summary Update an environment tag
         * @param {string} orgName Organization name
         * @param {string} projectName Project name
         * @param {string} envName Environment name
         * @param {string} tagName Tag name
         * @param {UpdateEnvironmentTag} updateEnvironmentTag Update environment tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEnvironmentTag: (orgName_24, projectName_21, envName_21, tagName_6, updateEnvironmentTag_1, ...args_24) => __awaiter(this, [orgName_24, projectName_21, envName_21, tagName_6, updateEnvironmentTag_1, ...args_24], void 0, function* (orgName, projectName, envName, tagName, updateEnvironmentTag, options = {}) {
            // verify required parameter 'orgName' is not null or undefined
            (0, common_1.assertParamExists)('updateEnvironmentTag', 'orgName', orgName);
            // verify required parameter 'projectName' is not null or undefined
            (0, common_1.assertParamExists)('updateEnvironmentTag', 'projectName', projectName);
            // verify required parameter 'envName' is not null or undefined
            (0, common_1.assertParamExists)('updateEnvironmentTag', 'envName', envName);
            // verify required parameter 'tagName' is not null or undefined
            (0, common_1.assertParamExists)('updateEnvironmentTag', 'tagName', tagName);
            // verify required parameter 'updateEnvironmentTag' is not null or undefined
            (0, common_1.assertParamExists)('updateEnvironmentTag', 'updateEnvironmentTag', updateEnvironmentTag);
            const localVarPath = `/environments/{orgName}/{projectName}/{envName}/tags/{tagName}`
                .replace(`{${"orgName"}}`, encodeURIComponent(String(orgName)))
                .replace(`{${"projectName"}}`, encodeURIComponent(String(projectName)))
                .replace(`{${"envName"}}`, encodeURIComponent(String(envName)))
                .replace(`{${"tagName"}}`, encodeURIComponent(String(tagName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Authorization required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            localVarHeaderParameter['X-Pulumi-Source'] = 'esc-sdk';
            localVarHeaderParameter['User-Agent'] = userAgent;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(updateEnvironmentTag, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Validates and updates the given environment\'s definition.
         * @summary Update an existing environment with Yaml file
         * @param {string} orgName Organization name
         * @param {string} projectName Project name
         * @param {string} envName Environment name
         * @param {string} body Environment Yaml content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEnvironmentYaml: (orgName_25, projectName_22, envName_22, body_2, ...args_25) => __awaiter(this, [orgName_25, projectName_22, envName_22, body_2, ...args_25], void 0, function* (orgName, projectName, envName, body, options = {}) {
            // verify required parameter 'orgName' is not null or undefined
            (0, common_1.assertParamExists)('updateEnvironmentYaml', 'orgName', orgName);
            // verify required parameter 'projectName' is not null or undefined
            (0, common_1.assertParamExists)('updateEnvironmentYaml', 'projectName', projectName);
            // verify required parameter 'envName' is not null or undefined
            (0, common_1.assertParamExists)('updateEnvironmentYaml', 'envName', envName);
            // verify required parameter 'body' is not null or undefined
            (0, common_1.assertParamExists)('updateEnvironmentYaml', 'body', body);
            const localVarPath = `/environments/{orgName}/{projectName}/{envName}`
                .replace(`{${"orgName"}}`, encodeURIComponent(String(orgName)))
                .replace(`{${"projectName"}}`, encodeURIComponent(String(projectName)))
                .replace(`{${"envName"}}`, encodeURIComponent(String(envName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Authorization required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/x-yaml';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            localVarHeaderParameter['X-Pulumi-Source'] = 'esc-sdk';
            localVarHeaderParameter['User-Agent'] = userAgent;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.EscApiAxiosParamCreator = EscApiAxiosParamCreator;
/**
 * EscApi - functional programming interface
 * @export
 */
const EscApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.EscApiAxiosParamCreator)(configuration);
    return {
        /**
         * Checks an environment definition for errors
         * @summary Checks an environment definition for errors
         * @param {string} orgName Organization name
         * @param {string} body Environment Yaml content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkEnvironmentYaml(orgName, body, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.checkEnvironmentYaml(orgName, body, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['EscApi.checkEnvironmentYaml']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Clones an environment
         * @summary Clones an environment
         * @param {string} orgName Organization name
         * @param {string} projectName Project name
         * @param {string} envName Environment name
         * @param {CloneEnvironment} cloneEnvironment Clone environment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloneEnvironment(orgName, projectName, envName, cloneEnvironment, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.cloneEnvironment(orgName, projectName, envName, cloneEnvironment, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['EscApi.cloneEnvironment']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Creates an environment in the given org with the given name.
         * @summary Create a new environment
         * @param {string} orgName Organization name
         * @param {CreateEnvironment} createEnvironment Create Environment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEnvironment(orgName, createEnvironment, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createEnvironment(orgName, createEnvironment, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['EscApi.createEnvironment']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Create environment revision tag
         * @summary Create environment revision tag
         * @param {string} orgName Organization name
         * @param {string} projectName Project name
         * @param {string} envName Environment name
         * @param {CreateEnvironmentRevisionTag} createEnvironmentRevisionTag Create environment revision tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEnvironmentRevisionTag(orgName, projectName, envName, createEnvironmentRevisionTag, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createEnvironmentRevisionTag(orgName, projectName, envName, createEnvironmentRevisionTag, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['EscApi.createEnvironmentRevisionTag']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Create environment tag
         * @summary Create environment tag
         * @param {string} orgName Organization name
         * @param {string} projectName Project name
         * @param {string} envName Environment name
         * @param {CreateEnvironmentTag} createEnvironmentTag Create environment tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEnvironmentTag(orgName, projectName, envName, createEnvironmentTag, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createEnvironmentTag(orgName, projectName, envName, createEnvironmentTag, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['EscApi.createEnvironmentTag']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Reads the definition for the given environment with static secrets in plaintext
         * @summary Reads the definition for the given environment with static secrets in plaintext
         * @param {string} orgName Organization name
         * @param {string} projectName Project name
         * @param {string} envName Environment name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        decryptEnvironment(orgName, projectName, envName, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.decryptEnvironment(orgName, projectName, envName, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['EscApi.decryptEnvironment']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Delete an environment
         * @summary Delete an environment
         * @param {string} orgName Organization name
         * @param {string} projectName Project name
         * @param {string} envName Environment name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEnvironment(orgName, projectName, envName, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteEnvironment(orgName, projectName, envName, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['EscApi.deleteEnvironment']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Delete environment revision tag
         * @summary Delete environment revision tag
         * @param {string} orgName Organization name
         * @param {string} projectName Project name
         * @param {string} envName Environment name
         * @param {string} tagName Tag name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEnvironmentRevisionTag(orgName, projectName, envName, tagName, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteEnvironmentRevisionTag(orgName, projectName, envName, tagName, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['EscApi.deleteEnvironmentRevisionTag']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Delete environment tag
         * @summary Delete environment tag
         * @param {string} orgName Organization name
         * @param {string} projectName Project name
         * @param {string} envName Environment name
         * @param {string} tagName Tag name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEnvironmentTag(orgName, projectName, envName, tagName, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteEnvironmentTag(orgName, projectName, envName, tagName, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['EscApi.deleteEnvironmentTag']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Read an environment
         * @summary Read an environment
         * @param {string} orgName Organization name
         * @param {string} projectName Project name
         * @param {string} envName Environment name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnvironment(orgName, projectName, envName, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getEnvironment(orgName, projectName, envName, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['EscApi.getEnvironment']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Read an environmentat a specific revision or tag
         * @summary Read an environment at a specific version
         * @param {string} orgName Organization name
         * @param {string} projectName Project name
         * @param {string} envName Environment name
         * @param {string} version Revision or tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnvironmentAtVersion(orgName, projectName, envName, version, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getEnvironmentAtVersion(orgName, projectName, envName, version, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['EscApi.getEnvironmentAtVersion']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Returns the ETag for the given environment if it exists.
         * @summary Return an Environment ETag
         * @param {string} orgName Organization name
         * @param {string} projectName Project name
         * @param {string} envName Environment name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnvironmentETag(orgName, projectName, envName, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getEnvironmentETag(orgName, projectName, envName, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['EscApi.getEnvironmentETag']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Read environment revision tag
         * @summary Read environment revision tag
         * @param {string} orgName Organization name
         * @param {string} projectName Project name
         * @param {string} envName Environment name
         * @param {string} tagName Tag name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnvironmentRevisionTag(orgName, projectName, envName, tagName, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getEnvironmentRevisionTag(orgName, projectName, envName, tagName, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['EscApi.getEnvironmentRevisionTag']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Read an environment tag
         * @summary Read an environment tag
         * @param {string} orgName Organization name
         * @param {string} projectName Project name
         * @param {string} envName Environment name
         * @param {string} tagName Tag name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnvironmentTag(orgName, projectName, envName, tagName, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getEnvironmentTag(orgName, projectName, envName, tagName, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['EscApi.getEnvironmentTag']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * List environment revisions
         * @summary List environment revisions
         * @param {string} orgName Organization name
         * @param {string} projectName Project name
         * @param {string} envName Environment name
         * @param {string} [after] after tag for pagination
         * @param {number} [count] limit of tags to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEnvironmentRevisionTags(orgName, projectName, envName, after, count, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listEnvironmentRevisionTags(orgName, projectName, envName, after, count, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['EscApi.listEnvironmentRevisionTags']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * List environment revisions
         * @summary List environment revisions
         * @param {string} orgName Organization name
         * @param {string} projectName Project name
         * @param {string} envName Environment name
         * @param {number} [before] before revision number for pagination
         * @param {number} [count] limit of revisions to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEnvironmentRevisions(orgName, projectName, envName, before, count, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listEnvironmentRevisions(orgName, projectName, envName, before, count, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['EscApi.listEnvironmentRevisions']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * List environment tags
         * @summary List environment tags
         * @param {string} orgName Organization name
         * @param {string} projectName Project name
         * @param {string} envName Environment name
         * @param {string} [after] after tag for pagination
         * @param {number} [count] limit of tags to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEnvironmentTags(orgName, projectName, envName, after, count, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listEnvironmentTags(orgName, projectName, envName, after, count, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['EscApi.listEnvironmentTags']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * List environments in the organization available to the current user
         * @summary List environments in the organization
         * @param {string} orgName Organization name
         * @param {string} [continuationToken] continuation Token from previous query to fetch next page of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEnvironments(orgName, continuationToken, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listEnvironments(orgName, continuationToken, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['EscApi.listEnvironments']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Opens a session the given environment for the indicated duration. This returns a session id that can be used to then read values. The default duration is 1 hour.
         * @summary Open an environment session
         * @param {string} orgName Organization name
         * @param {string} projectName Project name
         * @param {string} envName Environment name
         * @param {string} [duration] open duration - A duration string is a possibly signed sequence of decimal numbers, each with optional fraction and a unit suffix, such as “300ms”, “1.5h” or “2h45m”. Valid time units are “ns”, “us” (or “µs”), “ms”, “s”, “m”, “h”.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openEnvironment(orgName, projectName, envName, duration, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.openEnvironment(orgName, projectName, envName, duration, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['EscApi.openEnvironment']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Opens a session the given environment at a specific version for the indicated duration. This returns a session id that can be used to then read values. The default duration is 1 hour.
         * @summary Open an environment session at a specific version
         * @param {string} orgName Organization name
         * @param {string} projectName Project name
         * @param {string} envName Environment name
         * @param {string} version Revision or tag
         * @param {string} [duration] open duration - A duration string is a possibly signed sequence of decimal numbers, each with optional fraction and a unit suffix, such as “300ms”, “1.5h” or “2h45m”. Valid time units are “ns”, “us” (or “µs”), “ms”, “s”, “m”, “h”.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openEnvironmentAtVersion(orgName, projectName, envName, version, duration, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.openEnvironmentAtVersion(orgName, projectName, envName, version, duration, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['EscApi.openEnvironmentAtVersion']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Reads and decrypts secrets including retrieving dynamic secrets from providers.
         * @summary Read an open environment
         * @param {string} orgName Organization name
         * @param {string} projectName Project name
         * @param {string} envName Environment name
         * @param {string} openSessionID Open session ID returned from environment open
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readOpenEnvironment(orgName, projectName, envName, openSessionID, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.readOpenEnvironment(orgName, projectName, envName, openSessionID, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['EscApi.readOpenEnvironment']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Reads and decrypts secrets including retrieving dynamic secrets from providers.
         * @summary Read an open environment
         * @param {string} orgName Organization name
         * @param {string} projectName Project name
         * @param {string} envName Environment name
         * @param {string} openSessionID Open session ID returned from environment open
         * @param {string} property Path to a specific property using Pulumi path syntax https://www.pulumi.com/docs/concepts/config/#structured-configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readOpenEnvironmentProperty(orgName, projectName, envName, openSessionID, property, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.readOpenEnvironmentProperty(orgName, projectName, envName, openSessionID, property, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['EscApi.readOpenEnvironmentProperty']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Update environment revision tag
         * @summary Update environment revision tag
         * @param {string} orgName Organization name
         * @param {string} projectName Project name
         * @param {string} envName Environment name
         * @param {string} tagName Tag name
         * @param {UpdateEnvironmentRevisionTag} updateEnvironmentRevisionTag Update environment revision tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEnvironmentRevisionTag(orgName, projectName, envName, tagName, updateEnvironmentRevisionTag, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateEnvironmentRevisionTag(orgName, projectName, envName, tagName, updateEnvironmentRevisionTag, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['EscApi.updateEnvironmentRevisionTag']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Update an environment tag
         * @summary Update an environment tag
         * @param {string} orgName Organization name
         * @param {string} projectName Project name
         * @param {string} envName Environment name
         * @param {string} tagName Tag name
         * @param {UpdateEnvironmentTag} updateEnvironmentTag Update environment tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEnvironmentTag(orgName, projectName, envName, tagName, updateEnvironmentTag, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateEnvironmentTag(orgName, projectName, envName, tagName, updateEnvironmentTag, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['EscApi.updateEnvironmentTag']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Validates and updates the given environment\'s definition.
         * @summary Update an existing environment with Yaml file
         * @param {string} orgName Organization name
         * @param {string} projectName Project name
         * @param {string} envName Environment name
         * @param {string} body Environment Yaml content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEnvironmentYaml(orgName, projectName, envName, body, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateEnvironmentYaml(orgName, projectName, envName, body, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['EscApi.updateEnvironmentYaml']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
exports.EscApiFp = EscApiFp;
/**
 * EscApi - factory interface
 * @export
 */
const EscApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.EscApiFp)(configuration);
    return {
        /**
         * Checks an environment definition for errors
         * @summary Checks an environment definition for errors
         * @param {string} orgName Organization name
         * @param {string} body Environment Yaml content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkEnvironmentYaml(orgName, body, options) {
            return localVarFp.checkEnvironmentYaml(orgName, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Clones an environment
         * @summary Clones an environment
         * @param {string} orgName Organization name
         * @param {string} projectName Project name
         * @param {string} envName Environment name
         * @param {CloneEnvironment} cloneEnvironment Clone environment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloneEnvironment(orgName, projectName, envName, cloneEnvironment, options) {
            return localVarFp.cloneEnvironment(orgName, projectName, envName, cloneEnvironment, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates an environment in the given org with the given name.
         * @summary Create a new environment
         * @param {string} orgName Organization name
         * @param {CreateEnvironment} createEnvironment Create Environment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEnvironment(orgName, createEnvironment, options) {
            return localVarFp.createEnvironment(orgName, createEnvironment, options).then((request) => request(axios, basePath));
        },
        /**
         * Create environment revision tag
         * @summary Create environment revision tag
         * @param {string} orgName Organization name
         * @param {string} projectName Project name
         * @param {string} envName Environment name
         * @param {CreateEnvironmentRevisionTag} createEnvironmentRevisionTag Create environment revision tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEnvironmentRevisionTag(orgName, projectName, envName, createEnvironmentRevisionTag, options) {
            return localVarFp.createEnvironmentRevisionTag(orgName, projectName, envName, createEnvironmentRevisionTag, options).then((request) => request(axios, basePath));
        },
        /**
         * Create environment tag
         * @summary Create environment tag
         * @param {string} orgName Organization name
         * @param {string} projectName Project name
         * @param {string} envName Environment name
         * @param {CreateEnvironmentTag} createEnvironmentTag Create environment tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEnvironmentTag(orgName, projectName, envName, createEnvironmentTag, options) {
            return localVarFp.createEnvironmentTag(orgName, projectName, envName, createEnvironmentTag, options).then((request) => request(axios, basePath));
        },
        /**
         * Reads the definition for the given environment with static secrets in plaintext
         * @summary Reads the definition for the given environment with static secrets in plaintext
         * @param {string} orgName Organization name
         * @param {string} projectName Project name
         * @param {string} envName Environment name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        decryptEnvironment(orgName, projectName, envName, options) {
            return localVarFp.decryptEnvironment(orgName, projectName, envName, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an environment
         * @summary Delete an environment
         * @param {string} orgName Organization name
         * @param {string} projectName Project name
         * @param {string} envName Environment name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEnvironment(orgName, projectName, envName, options) {
            return localVarFp.deleteEnvironment(orgName, projectName, envName, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete environment revision tag
         * @summary Delete environment revision tag
         * @param {string} orgName Organization name
         * @param {string} projectName Project name
         * @param {string} envName Environment name
         * @param {string} tagName Tag name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEnvironmentRevisionTag(orgName, projectName, envName, tagName, options) {
            return localVarFp.deleteEnvironmentRevisionTag(orgName, projectName, envName, tagName, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete environment tag
         * @summary Delete environment tag
         * @param {string} orgName Organization name
         * @param {string} projectName Project name
         * @param {string} envName Environment name
         * @param {string} tagName Tag name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEnvironmentTag(orgName, projectName, envName, tagName, options) {
            return localVarFp.deleteEnvironmentTag(orgName, projectName, envName, tagName, options).then((request) => request(axios, basePath));
        },
        /**
         * Read an environment
         * @summary Read an environment
         * @param {string} orgName Organization name
         * @param {string} projectName Project name
         * @param {string} envName Environment name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnvironment(orgName, projectName, envName, options) {
            return localVarFp.getEnvironment(orgName, projectName, envName, options).then((request) => request(axios, basePath));
        },
        /**
         * Read an environmentat a specific revision or tag
         * @summary Read an environment at a specific version
         * @param {string} orgName Organization name
         * @param {string} projectName Project name
         * @param {string} envName Environment name
         * @param {string} version Revision or tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnvironmentAtVersion(orgName, projectName, envName, version, options) {
            return localVarFp.getEnvironmentAtVersion(orgName, projectName, envName, version, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the ETag for the given environment if it exists.
         * @summary Return an Environment ETag
         * @param {string} orgName Organization name
         * @param {string} projectName Project name
         * @param {string} envName Environment name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnvironmentETag(orgName, projectName, envName, options) {
            return localVarFp.getEnvironmentETag(orgName, projectName, envName, options).then((request) => request(axios, basePath));
        },
        /**
         * Read environment revision tag
         * @summary Read environment revision tag
         * @param {string} orgName Organization name
         * @param {string} projectName Project name
         * @param {string} envName Environment name
         * @param {string} tagName Tag name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnvironmentRevisionTag(orgName, projectName, envName, tagName, options) {
            return localVarFp.getEnvironmentRevisionTag(orgName, projectName, envName, tagName, options).then((request) => request(axios, basePath));
        },
        /**
         * Read an environment tag
         * @summary Read an environment tag
         * @param {string} orgName Organization name
         * @param {string} projectName Project name
         * @param {string} envName Environment name
         * @param {string} tagName Tag name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnvironmentTag(orgName, projectName, envName, tagName, options) {
            return localVarFp.getEnvironmentTag(orgName, projectName, envName, tagName, options).then((request) => request(axios, basePath));
        },
        /**
         * List environment revisions
         * @summary List environment revisions
         * @param {string} orgName Organization name
         * @param {string} projectName Project name
         * @param {string} envName Environment name
         * @param {string} [after] after tag for pagination
         * @param {number} [count] limit of tags to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEnvironmentRevisionTags(orgName, projectName, envName, after, count, options) {
            return localVarFp.listEnvironmentRevisionTags(orgName, projectName, envName, after, count, options).then((request) => request(axios, basePath));
        },
        /**
         * List environment revisions
         * @summary List environment revisions
         * @param {string} orgName Organization name
         * @param {string} projectName Project name
         * @param {string} envName Environment name
         * @param {number} [before] before revision number for pagination
         * @param {number} [count] limit of revisions to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEnvironmentRevisions(orgName, projectName, envName, before, count, options) {
            return localVarFp.listEnvironmentRevisions(orgName, projectName, envName, before, count, options).then((request) => request(axios, basePath));
        },
        /**
         * List environment tags
         * @summary List environment tags
         * @param {string} orgName Organization name
         * @param {string} projectName Project name
         * @param {string} envName Environment name
         * @param {string} [after] after tag for pagination
         * @param {number} [count] limit of tags to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEnvironmentTags(orgName, projectName, envName, after, count, options) {
            return localVarFp.listEnvironmentTags(orgName, projectName, envName, after, count, options).then((request) => request(axios, basePath));
        },
        /**
         * List environments in the organization available to the current user
         * @summary List environments in the organization
         * @param {string} orgName Organization name
         * @param {string} [continuationToken] continuation Token from previous query to fetch next page of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEnvironments(orgName, continuationToken, options) {
            return localVarFp.listEnvironments(orgName, continuationToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Opens a session the given environment for the indicated duration. This returns a session id that can be used to then read values. The default duration is 1 hour.
         * @summary Open an environment session
         * @param {string} orgName Organization name
         * @param {string} projectName Project name
         * @param {string} envName Environment name
         * @param {string} [duration] open duration - A duration string is a possibly signed sequence of decimal numbers, each with optional fraction and a unit suffix, such as “300ms”, “1.5h” or “2h45m”. Valid time units are “ns”, “us” (or “µs”), “ms”, “s”, “m”, “h”.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openEnvironment(orgName, projectName, envName, duration, options) {
            return localVarFp.openEnvironment(orgName, projectName, envName, duration, options).then((request) => request(axios, basePath));
        },
        /**
         * Opens a session the given environment at a specific version for the indicated duration. This returns a session id that can be used to then read values. The default duration is 1 hour.
         * @summary Open an environment session at a specific version
         * @param {string} orgName Organization name
         * @param {string} projectName Project name
         * @param {string} envName Environment name
         * @param {string} version Revision or tag
         * @param {string} [duration] open duration - A duration string is a possibly signed sequence of decimal numbers, each with optional fraction and a unit suffix, such as “300ms”, “1.5h” or “2h45m”. Valid time units are “ns”, “us” (or “µs”), “ms”, “s”, “m”, “h”.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openEnvironmentAtVersion(orgName, projectName, envName, version, duration, options) {
            return localVarFp.openEnvironmentAtVersion(orgName, projectName, envName, version, duration, options).then((request) => request(axios, basePath));
        },
        /**
         * Reads and decrypts secrets including retrieving dynamic secrets from providers.
         * @summary Read an open environment
         * @param {string} orgName Organization name
         * @param {string} projectName Project name
         * @param {string} envName Environment name
         * @param {string} openSessionID Open session ID returned from environment open
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readOpenEnvironment(orgName, projectName, envName, openSessionID, options) {
            return localVarFp.readOpenEnvironment(orgName, projectName, envName, openSessionID, options).then((request) => request(axios, basePath));
        },
        /**
         * Reads and decrypts secrets including retrieving dynamic secrets from providers.
         * @summary Read an open environment
         * @param {string} orgName Organization name
         * @param {string} projectName Project name
         * @param {string} envName Environment name
         * @param {string} openSessionID Open session ID returned from environment open
         * @param {string} property Path to a specific property using Pulumi path syntax https://www.pulumi.com/docs/concepts/config/#structured-configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readOpenEnvironmentProperty(orgName, projectName, envName, openSessionID, property, options) {
            return localVarFp.readOpenEnvironmentProperty(orgName, projectName, envName, openSessionID, property, options).then((request) => request(axios, basePath));
        },
        /**
         * Update environment revision tag
         * @summary Update environment revision tag
         * @param {string} orgName Organization name
         * @param {string} projectName Project name
         * @param {string} envName Environment name
         * @param {string} tagName Tag name
         * @param {UpdateEnvironmentRevisionTag} updateEnvironmentRevisionTag Update environment revision tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEnvironmentRevisionTag(orgName, projectName, envName, tagName, updateEnvironmentRevisionTag, options) {
            return localVarFp.updateEnvironmentRevisionTag(orgName, projectName, envName, tagName, updateEnvironmentRevisionTag, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an environment tag
         * @summary Update an environment tag
         * @param {string} orgName Organization name
         * @param {string} projectName Project name
         * @param {string} envName Environment name
         * @param {string} tagName Tag name
         * @param {UpdateEnvironmentTag} updateEnvironmentTag Update environment tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEnvironmentTag(orgName, projectName, envName, tagName, updateEnvironmentTag, options) {
            return localVarFp.updateEnvironmentTag(orgName, projectName, envName, tagName, updateEnvironmentTag, options).then((request) => request(axios, basePath));
        },
        /**
         * Validates and updates the given environment\'s definition.
         * @summary Update an existing environment with Yaml file
         * @param {string} orgName Organization name
         * @param {string} projectName Project name
         * @param {string} envName Environment name
         * @param {string} body Environment Yaml content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEnvironmentYaml(orgName, projectName, envName, body, options) {
            return localVarFp.updateEnvironmentYaml(orgName, projectName, envName, body, options).then((request) => request(axios, basePath));
        },
    };
};
exports.EscApiFactory = EscApiFactory;
/**
 * EscApi - object-oriented interface
 * @export
 * @class EscApi
 * @extends {BaseAPI}
 */
class EscApi extends base_1.BaseAPI {
    /**
     * Checks an environment definition for errors
     * @summary Checks an environment definition for errors
     * @param {string} orgName Organization name
     * @param {string} body Environment Yaml content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EscApi
     */
    checkEnvironmentYaml(orgName, body, options) {
        return (0, exports.EscApiFp)(this.configuration).checkEnvironmentYaml(orgName, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Clones an environment
     * @summary Clones an environment
     * @param {string} orgName Organization name
     * @param {string} projectName Project name
     * @param {string} envName Environment name
     * @param {CloneEnvironment} cloneEnvironment Clone environment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EscApi
     */
    cloneEnvironment(orgName, projectName, envName, cloneEnvironment, options) {
        return (0, exports.EscApiFp)(this.configuration).cloneEnvironment(orgName, projectName, envName, cloneEnvironment, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Creates an environment in the given org with the given name.
     * @summary Create a new environment
     * @param {string} orgName Organization name
     * @param {CreateEnvironment} createEnvironment Create Environment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EscApi
     */
    createEnvironment(orgName, createEnvironment, options) {
        return (0, exports.EscApiFp)(this.configuration).createEnvironment(orgName, createEnvironment, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create environment revision tag
     * @summary Create environment revision tag
     * @param {string} orgName Organization name
     * @param {string} projectName Project name
     * @param {string} envName Environment name
     * @param {CreateEnvironmentRevisionTag} createEnvironmentRevisionTag Create environment revision tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EscApi
     */
    createEnvironmentRevisionTag(orgName, projectName, envName, createEnvironmentRevisionTag, options) {
        return (0, exports.EscApiFp)(this.configuration).createEnvironmentRevisionTag(orgName, projectName, envName, createEnvironmentRevisionTag, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create environment tag
     * @summary Create environment tag
     * @param {string} orgName Organization name
     * @param {string} projectName Project name
     * @param {string} envName Environment name
     * @param {CreateEnvironmentTag} createEnvironmentTag Create environment tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EscApi
     */
    createEnvironmentTag(orgName, projectName, envName, createEnvironmentTag, options) {
        return (0, exports.EscApiFp)(this.configuration).createEnvironmentTag(orgName, projectName, envName, createEnvironmentTag, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Reads the definition for the given environment with static secrets in plaintext
     * @summary Reads the definition for the given environment with static secrets in plaintext
     * @param {string} orgName Organization name
     * @param {string} projectName Project name
     * @param {string} envName Environment name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EscApi
     */
    decryptEnvironment(orgName, projectName, envName, options) {
        return (0, exports.EscApiFp)(this.configuration).decryptEnvironment(orgName, projectName, envName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete an environment
     * @summary Delete an environment
     * @param {string} orgName Organization name
     * @param {string} projectName Project name
     * @param {string} envName Environment name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EscApi
     */
    deleteEnvironment(orgName, projectName, envName, options) {
        return (0, exports.EscApiFp)(this.configuration).deleteEnvironment(orgName, projectName, envName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete environment revision tag
     * @summary Delete environment revision tag
     * @param {string} orgName Organization name
     * @param {string} projectName Project name
     * @param {string} envName Environment name
     * @param {string} tagName Tag name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EscApi
     */
    deleteEnvironmentRevisionTag(orgName, projectName, envName, tagName, options) {
        return (0, exports.EscApiFp)(this.configuration).deleteEnvironmentRevisionTag(orgName, projectName, envName, tagName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete environment tag
     * @summary Delete environment tag
     * @param {string} orgName Organization name
     * @param {string} projectName Project name
     * @param {string} envName Environment name
     * @param {string} tagName Tag name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EscApi
     */
    deleteEnvironmentTag(orgName, projectName, envName, tagName, options) {
        return (0, exports.EscApiFp)(this.configuration).deleteEnvironmentTag(orgName, projectName, envName, tagName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Read an environment
     * @summary Read an environment
     * @param {string} orgName Organization name
     * @param {string} projectName Project name
     * @param {string} envName Environment name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EscApi
     */
    getEnvironment(orgName, projectName, envName, options) {
        return (0, exports.EscApiFp)(this.configuration).getEnvironment(orgName, projectName, envName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Read an environmentat a specific revision or tag
     * @summary Read an environment at a specific version
     * @param {string} orgName Organization name
     * @param {string} projectName Project name
     * @param {string} envName Environment name
     * @param {string} version Revision or tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EscApi
     */
    getEnvironmentAtVersion(orgName, projectName, envName, version, options) {
        return (0, exports.EscApiFp)(this.configuration).getEnvironmentAtVersion(orgName, projectName, envName, version, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns the ETag for the given environment if it exists.
     * @summary Return an Environment ETag
     * @param {string} orgName Organization name
     * @param {string} projectName Project name
     * @param {string} envName Environment name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EscApi
     */
    getEnvironmentETag(orgName, projectName, envName, options) {
        return (0, exports.EscApiFp)(this.configuration).getEnvironmentETag(orgName, projectName, envName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Read environment revision tag
     * @summary Read environment revision tag
     * @param {string} orgName Organization name
     * @param {string} projectName Project name
     * @param {string} envName Environment name
     * @param {string} tagName Tag name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EscApi
     */
    getEnvironmentRevisionTag(orgName, projectName, envName, tagName, options) {
        return (0, exports.EscApiFp)(this.configuration).getEnvironmentRevisionTag(orgName, projectName, envName, tagName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Read an environment tag
     * @summary Read an environment tag
     * @param {string} orgName Organization name
     * @param {string} projectName Project name
     * @param {string} envName Environment name
     * @param {string} tagName Tag name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EscApi
     */
    getEnvironmentTag(orgName, projectName, envName, tagName, options) {
        return (0, exports.EscApiFp)(this.configuration).getEnvironmentTag(orgName, projectName, envName, tagName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List environment revisions
     * @summary List environment revisions
     * @param {string} orgName Organization name
     * @param {string} projectName Project name
     * @param {string} envName Environment name
     * @param {string} [after] after tag for pagination
     * @param {number} [count] limit of tags to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EscApi
     */
    listEnvironmentRevisionTags(orgName, projectName, envName, after, count, options) {
        return (0, exports.EscApiFp)(this.configuration).listEnvironmentRevisionTags(orgName, projectName, envName, after, count, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List environment revisions
     * @summary List environment revisions
     * @param {string} orgName Organization name
     * @param {string} projectName Project name
     * @param {string} envName Environment name
     * @param {number} [before] before revision number for pagination
     * @param {number} [count] limit of revisions to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EscApi
     */
    listEnvironmentRevisions(orgName, projectName, envName, before, count, options) {
        return (0, exports.EscApiFp)(this.configuration).listEnvironmentRevisions(orgName, projectName, envName, before, count, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List environment tags
     * @summary List environment tags
     * @param {string} orgName Organization name
     * @param {string} projectName Project name
     * @param {string} envName Environment name
     * @param {string} [after] after tag for pagination
     * @param {number} [count] limit of tags to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EscApi
     */
    listEnvironmentTags(orgName, projectName, envName, after, count, options) {
        return (0, exports.EscApiFp)(this.configuration).listEnvironmentTags(orgName, projectName, envName, after, count, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List environments in the organization available to the current user
     * @summary List environments in the organization
     * @param {string} orgName Organization name
     * @param {string} [continuationToken] continuation Token from previous query to fetch next page of results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EscApi
     */
    listEnvironments(orgName, continuationToken, options) {
        return (0, exports.EscApiFp)(this.configuration).listEnvironments(orgName, continuationToken, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Opens a session the given environment for the indicated duration. This returns a session id that can be used to then read values. The default duration is 1 hour.
     * @summary Open an environment session
     * @param {string} orgName Organization name
     * @param {string} projectName Project name
     * @param {string} envName Environment name
     * @param {string} [duration] open duration - A duration string is a possibly signed sequence of decimal numbers, each with optional fraction and a unit suffix, such as “300ms”, “1.5h” or “2h45m”. Valid time units are “ns”, “us” (or “µs”), “ms”, “s”, “m”, “h”.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EscApi
     */
    openEnvironment(orgName, projectName, envName, duration, options) {
        return (0, exports.EscApiFp)(this.configuration).openEnvironment(orgName, projectName, envName, duration, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Opens a session the given environment at a specific version for the indicated duration. This returns a session id that can be used to then read values. The default duration is 1 hour.
     * @summary Open an environment session at a specific version
     * @param {string} orgName Organization name
     * @param {string} projectName Project name
     * @param {string} envName Environment name
     * @param {string} version Revision or tag
     * @param {string} [duration] open duration - A duration string is a possibly signed sequence of decimal numbers, each with optional fraction and a unit suffix, such as “300ms”, “1.5h” or “2h45m”. Valid time units are “ns”, “us” (or “µs”), “ms”, “s”, “m”, “h”.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EscApi
     */
    openEnvironmentAtVersion(orgName, projectName, envName, version, duration, options) {
        return (0, exports.EscApiFp)(this.configuration).openEnvironmentAtVersion(orgName, projectName, envName, version, duration, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Reads and decrypts secrets including retrieving dynamic secrets from providers.
     * @summary Read an open environment
     * @param {string} orgName Organization name
     * @param {string} projectName Project name
     * @param {string} envName Environment name
     * @param {string} openSessionID Open session ID returned from environment open
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EscApi
     */
    readOpenEnvironment(orgName, projectName, envName, openSessionID, options) {
        return (0, exports.EscApiFp)(this.configuration).readOpenEnvironment(orgName, projectName, envName, openSessionID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Reads and decrypts secrets including retrieving dynamic secrets from providers.
     * @summary Read an open environment
     * @param {string} orgName Organization name
     * @param {string} projectName Project name
     * @param {string} envName Environment name
     * @param {string} openSessionID Open session ID returned from environment open
     * @param {string} property Path to a specific property using Pulumi path syntax https://www.pulumi.com/docs/concepts/config/#structured-configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EscApi
     */
    readOpenEnvironmentProperty(orgName, projectName, envName, openSessionID, property, options) {
        return (0, exports.EscApiFp)(this.configuration).readOpenEnvironmentProperty(orgName, projectName, envName, openSessionID, property, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update environment revision tag
     * @summary Update environment revision tag
     * @param {string} orgName Organization name
     * @param {string} projectName Project name
     * @param {string} envName Environment name
     * @param {string} tagName Tag name
     * @param {UpdateEnvironmentRevisionTag} updateEnvironmentRevisionTag Update environment revision tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EscApi
     */
    updateEnvironmentRevisionTag(orgName, projectName, envName, tagName, updateEnvironmentRevisionTag, options) {
        return (0, exports.EscApiFp)(this.configuration).updateEnvironmentRevisionTag(orgName, projectName, envName, tagName, updateEnvironmentRevisionTag, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update an environment tag
     * @summary Update an environment tag
     * @param {string} orgName Organization name
     * @param {string} projectName Project name
     * @param {string} envName Environment name
     * @param {string} tagName Tag name
     * @param {UpdateEnvironmentTag} updateEnvironmentTag Update environment tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EscApi
     */
    updateEnvironmentTag(orgName, projectName, envName, tagName, updateEnvironmentTag, options) {
        return (0, exports.EscApiFp)(this.configuration).updateEnvironmentTag(orgName, projectName, envName, tagName, updateEnvironmentTag, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Validates and updates the given environment\'s definition.
     * @summary Update an existing environment with Yaml file
     * @param {string} orgName Organization name
     * @param {string} projectName Project name
     * @param {string} envName Environment name
     * @param {string} body Environment Yaml content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EscApi
     */
    updateEnvironmentYaml(orgName, projectName, envName, body, options) {
        return (0, exports.EscApiFp)(this.configuration).updateEnvironmentYaml(orgName, projectName, envName, body, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.EscApi = EscApi;
//# sourceMappingURL=api.js.map